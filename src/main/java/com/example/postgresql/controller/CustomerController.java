package com.example.postgresql.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.postgresql.entity.Customer;
import com.example.postgresql.repository.CustomerRepository;

@RestController
@RequestMapping(path="/customer") // This means URL's start with /demo (after Application path)
public class CustomerController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private CustomerRepository customerRepository;
	
	@GetMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String firstName
			, @RequestParam String lastName) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Customer n = new Customer(firstName, lastName);
		customerRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Customer> getAllUsers() {
		// This returns a JSON or XML with the users
		return customerRepository.findAll();
	}
	
	@GetMapping(path="/lastName")
	public @ResponseBody Iterable<Customer> getUsersByLastName(@RequestParam String lastName) {
		// This returns a JSON or XML with the users
		return customerRepository.findByLastName(lastName);
	}
}
